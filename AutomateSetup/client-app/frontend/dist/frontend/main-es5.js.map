{"version":3,"sources":["$_lazy_route_resource lazy namespace object","src/app/app.component.html","src/app/pages/dairy/dairy.component.html","src/app/pages/index/index.component.html","src/app/pages/seafood/seafood.component.html","node_modules/tslib/tslib.es6.js","src/app/api.service.ts","src/app/app-routing.module.ts","src/app/app.component.css","src/app/app.component.ts","src/app/app.module.ts","src/app/material.module.ts","src/app/pages/dairy/dairy.component.css","src/app/pages/dairy/dairy.component.ts","src/app/pages/index/index.component.css","src/app/pages/index/index.component.ts","src/app/pages/seafood/seafood.component.css","src/app/pages/seafood/seafood.component.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<h1>{{ title }}</h1>\\r\\n<div>\\r\\n  <router-outlet></router-outlet>\\r\\n</div>\\r\\n\"","export default \"<p>dairy works!</p>\\n\"","export default \"<div class=\\\"subtitle\\\"><h2>Choose the supply chain you want</h2></div>\\n<div class=\\\"main\\\">\\n  <button mat-button class=\\\"to-seafood\\\" (click)=\\\"toSeafood()\\\">Seafood</button>\\n  <button mat-button class=\\\"to-dairy\\\" (click)=\\\"toDairy()\\\">Dairy</button>\\n</div>\\n\"","export default \"<div class=\\\"head-box\\\">\\n  <h1>{{ title }}</h1>\\n  <h2>\\n    Using this user interface, you can interact with the Seafood supply chain.\\n    Check the <a href=\\\"https://github.com/ghareeb-falazi/SCIP-CaseStudy-2\\\">sample case study</a> for more detailes about what is involved.\\n  </h2>\\n</div>\\n\\n<mat-tab-group mat-stretch-tabs (selectedTabChange)=\\\"onTabClick($event)\\\">\\n  <!-- FISH -->\\n  <mat-tab label=\\\"Fisherman\\\">\\n    <h2>\\n      You can register a new captured fish by filling the form and clicking on\\n      the <em>Register Fish</em> button.\\n    </h2>\\n    <div class=\\\"wrapper\\\">\\n      <mat-card class=\\\"form-card\\\">\\n        <mat-card-header>\\n          <mat-card-title>Fill the form with all information about the captured fish</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content class=\\\"form-box\\\">\\n          <form\\n          [formGroup]=\\\"fishForm\\\"\\n          (ngSubmit)=\\\"onRegisterFish(fishForm.value)\\\"\\n        >\\n          <mat-form-field>\\n            <input matInput formControlName=\\\"fishId\\\" placeholder=\\\"Fish id..\\\" />\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input\\n              matInput\\n              formControlName=\\\"location\\\"\\n              placeholder=\\\"Location..\\\"\\n            />\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input\\n              matInput\\n              formControlName=\\\"fishermanName\\\"\\n              placeholder=\\\"Fisherman name..\\\"\\n            />\\n          </mat-form-field>\\n          <button class=\\\"button\\\" type=\\\"submit\\\">Register Fish</button>\\n        </form>\\n        <div class=\\\"result-box\\\">\\n          <div *ngIf=\\\"performing\\\" class=\\\"lds-roller mt-4\\\">\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n          </div>\\n          <div *ngIf=\\\"!performing\\\" class=\\\"mt-4\\\">\\n            {{ result }}\\n          </div>\\n        </div>\\n        </mat-card-content>\\n      </mat-card>\\n      <div class=\\\"query-box\\\">\\n        <mat-card>\\n          <mat-card-header>\\n            <mat-card-title>Registered Fishes</mat-card-title>\\n            <mat-card-subtitle>\\n              you can retrieve all registered fishes by clicking on the\\n              <em>Query</em> button\\n            </mat-card-subtitle>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <div *ngIf=\\\"fishPerforming\\\" class=\\\"lds-roller\\\">\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n            </div>\\n            <table\\n              *ngIf=\\\"!fishPerforming\\\"\\n              mat-table\\n              [dataSource]=\\\"fishes\\\"\\n              class=\\\"mat-elevation-z8\\\"\\n            >\\n              <ng-container matColumnDef=\\\"fishId\\\">\\n                <th mat-header-cell *matHeaderCellDef>Fish Id</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">{{ element.fishId }}</td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"location\\\">\\n                <th mat-header-cell *matHeaderCellDef>Location</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">{{ element.location }}</td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"fishermanName\\\">\\n                <th mat-header-cell *matHeaderCellDef>Fisherman Name</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                  {{ element.fishermanName }}\\n                </td>\\n              </ng-container>\\n              <tr mat-header-row *matHeaderRowDef=\\\"fishColumns\\\"></tr>\\n              <tr mat-row *matRowDef=\\\"let row; columns: fishColumns\\\"></tr>\\n            </table>\\n            <div *ngIf=\\\"fishError !== ''\\\" class=\\\"error-box\\\">\\n              {{ fishError }}\\n            </div>\\n          </mat-card-content>\\n          <mat-card-actions>\\n            <button type=\\\"button\\\" mat-button class=\\\"button clear-btn\\\" (click)=\\\"clearFishes()\\\">\\n              Clear\\n            </button>\\n            <button type=\\\"button\\\" mat-button class=\\\"button query-btn\\\" (click)=\\\"getFishes()\\\">\\n              Query\\n            </button>\\n          </mat-card-actions>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </mat-tab>\\n\\n  <!-- SHIPMENT -->\\n  <mat-tab label=\\\"Shipment Company\\\">\\n    <h2>\\n      You can register a new shipment of fishes by filling the form and clicking\\n      on the <em>Register Shipment</em> button.\\n    </h2>\\n    <div class=\\\"wrapper\\\">\\n      <mat-card class=\\\"form-card\\\">\\n        <mat-card-header>\\n          <mat-card-title>Fill the form with all information about the shipment</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content class=\\\"form-box\\\">\\n          <form\\n          [formGroup]=\\\"shipmentForm\\\"\\n          (ngSubmit)=\\\"onRegisterShipment(shipmentForm.value)\\\"\\n        >\\n          <mat-form-field>\\n            <mat-chip-list\\n              #shipmentFishIds\\n              formControlName=\\\"fishIds\\\"\\n              aria-label=\\\"Ids selection\\\"\\n            >\\n              <mat-chip\\n                *ngFor=\\\"let id of idsForShipment\\\"\\n                [selectable]=\\\"selectable\\\"\\n                [removable]=\\\"removable\\\"\\n                (removed)=\\\"removeIdFromShipment(id)\\\"\\n              >\\n                {{ id }}\\n                <mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\n              </mat-chip>\\n              <input\\n                placeholder=\\\"Fish ids..\\\"\\n                [matChipInputFor]=\\\"shipmentFishIds\\\"\\n                [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\n                [matChipInputAddOnBlur]=\\\"addOnBlur\\\"\\n                (matChipInputTokenEnd)=\\\"addIdInShipment($event)\\\"\\n              />\\n            </mat-chip-list>\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input\\n              matInput\\n              formControlName=\\\"toLocation\\\"\\n              placeholder=\\\"To location..\\\"\\n            />\\n          </mat-form-field>\\n          <mat-form-field>\\n            <input\\n              matInput\\n              formControlName=\\\"shipmentCompanyName\\\"\\n              placeholder=\\\"Company name..\\\"\\n            />\\n          </mat-form-field>\\n          <button class=\\\"button\\\" type=\\\"submit\\\">Register Shipment</button>\\n        </form>\\n        <div class=\\\"result-box\\\">\\n          <div *ngIf=\\\"performing\\\" class=\\\"lds-roller mt-4\\\">\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n          </div>\\n          <div *ngIf=\\\"!performing\\\" class=\\\"mt-4\\\">\\n            {{ result }}\\n          </div>\\n        </div>\\n        </mat-card-content>\\n      </mat-card>\\n      <div class=\\\"query-box\\\">\\n        <!-- SHIPMENTS -->\\n        <mat-card>\\n          <mat-card-header>\\n            <mat-card-title>Registered Fish Shipments</mat-card-title>\\n            <mat-card-subtitle>\\n              you can retrieve all registered fish shipments by clicking on the\\n              <em>Query</em> button\\n            </mat-card-subtitle>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <div *ngIf=\\\"shipmentPerforming\\\" class=\\\"lds-roller\\\">\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n            </div>\\n            <table\\n              *ngIf=\\\"!shipmentPerforming\\\"\\n              mat-table\\n              [dataSource]=\\\"shipments\\\"\\n              class=\\\"mat-elevation-z8\\\"\\n            >\\n              <ng-container matColumnDef=\\\"fishIds\\\">\\n                <th mat-header-cell *matHeaderCellDef>Fish Ids</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">{{ element.fishIds }}</td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"toLocation\\\">\\n                <th mat-header-cell *matHeaderCellDef>To Location</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                  {{ element.toLocation }}\\n                </td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"shipmentCompanyName\\\">\\n                <th mat-header-cell *matHeaderCellDef>\\n                  Shipment Company Name\\n                </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                  {{ element.shipmentCompanyName }}\\n                </td>\\n              </ng-container>\\n              <tr mat-header-row *matHeaderRowDef=\\\"shipmentColumns\\\"></tr>\\n              <tr mat-row *matRowDef=\\\"let row; columns: shipmentColumns\\\"></tr>\\n            </table>\\n            <div *ngIf=\\\"shipmentError !== ''\\\" class=\\\"error-box\\\">\\n              {{ shipmentError }}\\n            </div>\\n          </mat-card-content>\\n          <mat-card-actions>\\n            <button type=\\\"button\\\" mat-button class=\\\"button clear-btn\\\" (click)=\\\"clearShipments()\\\">\\n              Clear\\n            </button>\\n            <button type=\\\"button\\\" mat-button class=\\\"button query-btn\\\" (click)=\\\"getShipments()\\\">\\n              Query\\n            </button>\\n          </mat-card-actions>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </mat-tab>\\n\\n  <!-- PACKAGE -->\\n  <mat-tab label=\\\"Processing Facility\\\">\\n    <h2>\\n      You can register a new fishes' package by filling the form and clicking on\\n      the <em>Register Package</em> button.\\n    </h2>\\n    <div class=\\\"wrapper\\\">\\n      <mat-card class=\\\"form-card\\\">\\n        <mat-card-header>\\n          <mat-card-title>Fill the form with all information about the shipment</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content class=\\\"form-box\\\">\\n          <form\\n          [formGroup]=\\\"packageForm\\\"\\n          (ngSubmit)=\\\"onRegisterPackage(packageForm.value)\\\">\\n            <mat-form-field>\\n              <mat-chip-list\\n                #packageFishIds\\n                formControlName=\\\"fishIds\\\"\\n                aria-label=\\\"Ids selection\\\"\\n              >\\n                <mat-chip\\n                  *ngFor=\\\"let id of idsForPackage\\\"\\n                  [selectable]=\\\"selectable\\\"\\n                  [removable]=\\\"removable\\\"\\n                  (removed)=\\\"removeIdFromPackage(id)\\\"\\n                >\\n                  {{ id }}\\n                  <mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\n                </mat-chip>\\n                <input\\n                  placeholder=\\\"Fish ids..\\\"\\n                  [matChipInputFor]=\\\"packageFishIds\\\"\\n                  [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\n                  [matChipInputAddOnBlur]=\\\"addOnBlur\\\"\\n                  (matChipInputTokenEnd)=\\\"addIdInPackage($event)\\\"\\n                />\\n              </mat-chip-list>\\n            </mat-form-field>\\n            <mat-form-field>\\n              <input\\n                matInput\\n                formControlName=\\\"packageId\\\"\\n                placeholder=\\\"Package id..\\\"\\n              />\\n            </mat-form-field>\\n            <mat-form-field>\\n              <input\\n                matInput\\n                formControlName=\\\"processingFacilityName\\\"\\n                placeholder=\\\"Facility name..\\\"\\n              />\\n            </mat-form-field>\\n            <button class=\\\"button\\\" type=\\\"submit\\\">Register Package</button>\\n          </form>\\n          <div class=\\\"result-box\\\">\\n            <div *ngIf=\\\"performing\\\" class=\\\"lds-roller mt-4\\\">\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n            </div>\\n            <div *ngIf=\\\"!performing\\\" class=\\\"mt-4\\\">\\n              {{ result }}\\n            </div>\\n          </div>\\n        </mat-card-content>\\n      </mat-card>\\n      <div class=\\\"query-box\\\">\\n        <!-- PACKAGE -->\\n        <mat-card>\\n          <mat-card-header>\\n            <mat-card-title>Registered Packages</mat-card-title>\\n            <mat-card-subtitle>\\n              you can retrieve all registered packages by clicking on the\\n              <em>Query</em> button\\n            </mat-card-subtitle>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <div *ngIf=\\\"packagePerforming\\\" class=\\\"lds-roller\\\">\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n            </div>\\n            <table\\n              *ngIf=\\\"!packagePerforming\\\"\\n              mat-table\\n              [dataSource]=\\\"packages\\\"\\n              class=\\\"mat-elevation-z8\\\"\\n            >\\n              <ng-container matColumnDef=\\\"fishIds\\\">\\n                <th mat-header-cell *matHeaderCellDef>Fish Ids</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">{{ element.fishIds }}</td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"packageId\\\">\\n                <th mat-header-cell *matHeaderCellDef>Package Id</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                  {{ element.packageId }}\\n                </td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"processingFacilityName\\\">\\n                <th mat-header-cell *matHeaderCellDef>\\n                  Processing Facility Name\\n                </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                  {{ element.processingFacilityName }}\\n                </td>\\n              </ng-container>\\n              <tr mat-header-row *matHeaderRowDef=\\\"packageColumns\\\"></tr>\\n              <tr mat-row *matRowDef=\\\"let row; columns: packageColumns\\\"></tr>\\n            </table>\\n            <div *ngIf=\\\"packageError !== ''\\\" class=\\\"error-box\\\">\\n              {{ packageError }}\\n            </div>\\n          </mat-card-content>\\n          <mat-card-actions>\\n            <button type=\\\"button\\\" mat-button class=\\\"button clear-btn\\\" (click)=\\\"clearPackages()\\\">\\n              Clear\\n            </button>\\n            <button type=\\\"button\\\" mat-button class=\\\"button query-btn\\\" (click)=\\\"getPackages()\\\">\\n              Query\\n            </button>\\n          </mat-card-actions>\\n        </mat-card>\\n      </div>  \\n    </div>\\n  </mat-tab>\\n\\n  <!-- TRANSPORTATION -->\\n  <mat-tab label=\\\"Distributor\\\">\\n    <h2>\\n      You can register a transportation by filling the form and clicking on the\\n      <em>Register Transportation</em> button.\\n    </h2>\\n    <div class=\\\"wrapper\\\">\\n      <mat-card class=\\\"form-card\\\">\\n        <mat-card-header>\\n          <mat-card-title>Fill the form with all information about the shipment</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content class=\\\"form-box\\\">\\n          <form\\n          [formGroup]=\\\"transportationForm\\\"\\n          (ngSubmit)=\\\"onRegisterTransportation(transportationForm.value)\\\">\\n            <mat-form-field>\\n              <input\\n                matInput\\n                formControlName=\\\"packageId\\\"\\n                placeholder=\\\"Package id..\\\"\\n              />\\n            </mat-form-field>\\n            <mat-form-field>\\n              <input\\n                matInput\\n                formControlName=\\\"toLocation\\\"\\n                placeholder=\\\"To location..\\\"\\n              />\\n            </mat-form-field>\\n            <mat-form-field>\\n              <input\\n                matInput\\n                formControlName=\\\"distributorName\\\"\\n                placeholder=\\\"Distributor name..\\\"\\n              />\\n            </mat-form-field>\\n            <button class=\\\"button\\\" type=\\\"submit\\\">Register Transportation</button>\\n          </form>\\n          <div class=\\\"result-box\\\">\\n            <div *ngIf=\\\"performing\\\" class=\\\"lds-roller mt-4\\\">\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n            </div>\\n            <div *ngIf=\\\"!performing\\\" class=\\\"mt-4\\\">\\n              {{ result }}\\n            </div>\\n          </div>\\n        </mat-card-content>\\n      </mat-card>\\n      <div class=\\\"query-box\\\">\\n        <!-- TRANSPORTATION -->\\n        <mat-card>\\n          <mat-card-header>\\n            <mat-card-title>Registered Package Transportations</mat-card-title>\\n            <mat-card-subtitle>\\n              you can retrieve all registered package transportation by clicking on the\\n              <em>Query</em> button\\n            </mat-card-subtitle>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <div *ngIf=\\\"transportationPerforming\\\" class=\\\"lds-roller\\\">\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n            </div>\\n            <table\\n              *ngIf=\\\"!transportationPerforming\\\"\\n              mat-table\\n              [dataSource]=\\\"transportations\\\"\\n              class=\\\"mat-elevation-z8\\\"\\n            >\\n              <ng-container matColumnDef=\\\"packageId\\\">\\n                <th mat-header-cell *matHeaderCellDef>Package Id</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">{{ element.packageId }}</td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"toLocation\\\">\\n                <th mat-header-cell *matHeaderCellDef>To Location</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                  {{ element.toLocation }}\\n                </td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"distributorName\\\">\\n                <th mat-header-cell *matHeaderCellDef>\\n                  Distributor Name\\n                </th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">\\n                  {{ element.distributorName }}\\n                </td>\\n              </ng-container>\\n              <tr mat-header-row *matHeaderRowDef=\\\"transportationColumns\\\"></tr>\\n              <tr mat-row *matRowDef=\\\"let row; columns: transportationColumns\\\"></tr>\\n            </table>\\n            <div *ngIf=\\\"transportationError !== ''\\\" class=\\\"error-box\\\">\\n              {{ transportationError }}\\n            </div>\\n          </mat-card-content>\\n          <mat-card-actions>\\n            <button type=\\\"button\\\" mat-button class=\\\"button clear-btn\\\" (click)=\\\"clearTransportations()\\\">\\n              Clear\\n            </button>\\n            <button type=\\\"button\\\" mat-button class=\\\"button query-btn\\\" (click)=\\\"getTransportations()\\\">\\n              Query\\n            </button>\\n          </mat-card-actions>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </mat-tab>\\n\\n  <!-- INVENTORY -->\\n  <mat-tab label=\\\"Inventory\\\">\\n    <h2>\\n      You can register a new inventory entry by filling the form and clicking on\\n      the\\n      <em>Register Entry</em> button.\\n    </h2>\\n    <div class=\\\"wrapper\\\">\\n      <mat-card class=\\\"form-card\\\">\\n        <mat-card-header>\\n          <mat-card-title>Fill the form with all information about the shipment</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content class=\\\"form-box\\\">\\n          <form\\n          [formGroup]=\\\"inventoryEntryForm\\\"\\n          (ngSubmit)=\\\"onRegisterInInventory(inventoryEntryForm.value)\\\"\\n        >\\n            <mat-form-field>\\n              <input\\n                matInput\\n                formControlName=\\\"packageId\\\"\\n                placeholder=\\\"Package id..\\\"\\n              />\\n            </mat-form-field>\\n            <mat-form-field>\\n              <input\\n                matInput\\n                formControlName=\\\"retailerName\\\"\\n                placeholder=\\\"Retailer name..\\\"\\n              />\\n            </mat-form-field>\\n            <button class=\\\"button\\\" type=\\\"submit\\\">Register Entry</button>\\n          </form>\\n          <div class=\\\"result-box\\\">\\n            <div *ngIf=\\\"performing\\\" class=\\\"lds-roller mt-4\\\">\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n            </div>\\n            <div *ngIf=\\\"!performing\\\" class=\\\"mt-4\\\">\\n              {{ result }}\\n            </div>\\n          </div>\\n        </mat-card-content>\\n      </mat-card>\\n      <div class=\\\"query-box\\\">\\n        <!-- INVENTORY -->\\n        <mat-card>\\n          <mat-card-header>\\n            <mat-card-title>Packages In Inventory </mat-card-title>\\n            <mat-card-subtitle>\\n              you can retrieve all packages registered in inventory by clicking on the\\n              <em>Query</em> button\\n            </mat-card-subtitle>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <div *ngIf=\\\"entryPerforming\\\" class=\\\"lds-roller\\\">\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n            </div>\\n            <table\\n              *ngIf=\\\"!entryPerforming\\\"\\n              mat-table\\n              [dataSource]=\\\"entries\\\"\\n              class=\\\"mat-elevation-z8\\\"\\n            >\\n              <ng-container matColumnDef=\\\"packageId\\\">\\n                <th mat-header-cell *matHeaderCellDef>Package Id</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">{{ element.packageId }}</td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"retailerName\\\">\\n                <th mat-header-cell *matHeaderCellDef>Retailer Name</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">{{ element.retailerName }}</td>\\n              </ng-container>\\n              <tr mat-header-row *matHeaderRowDef=\\\"entryColumns\\\"></tr>\\n              <tr mat-row *matRowDef=\\\"let row; columns: entryColumns\\\"></tr>\\n            </table>\\n            <div *ngIf=\\\"entryError !== ''\\\" class=\\\"error-box\\\">\\n              {{ entryError }}\\n            </div>\\n          </mat-card-content>\\n          <mat-card-actions>\\n            <button type=\\\"button\\\" mat-button class=\\\"button clear-btn\\\" (click)=\\\"clearEntries()\\\">\\n              Clear\\n            </button>\\n            <button type=\\\"button\\\" mat-button class=\\\"button query-btn\\\" (click)=\\\"getEntries()\\\">\\n              Query\\n            </button>\\n          </mat-card-actions>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </mat-tab>\\n\\n  <!-- SALES -->\\n  <mat-tab label=\\\"Retailer\\\">\\n    <h2>\\n      You can register a new fishes' package sale by filling the form and\\n      clicking on the\\n      <em>Register Sale</em> button.\\n    </h2>\\n    <div class=\\\"wrapper\\\">\\n      <mat-card class=\\\"form-card\\\">\\n        <mat-card-header>\\n          <mat-card-title>Fill the form with all information about the shipment</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content class=\\\"form-box\\\">\\n          <form\\n          [formGroup]=\\\"sellingForm\\\"\\n          (ngSubmit)=\\\"onRegisterSelling(sellingForm.value)\\\"\\n        >\\n            <mat-form-field>\\n              <input\\n                matInput\\n                formControlName=\\\"packageId\\\"\\n                placeholder=\\\"Package id..\\\"\\n              />\\n            </mat-form-field>\\n            <button class=\\\"button\\\" type=\\\"submit\\\">Register Sale</button>\\n          </form>\\n          <div class=\\\"result-box\\\">\\n            <div *ngIf=\\\"performing\\\" class=\\\"lds-roller mt-4\\\">\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n            </div>\\n            <div *ngIf=\\\"!performing\\\" class=\\\"mt-4\\\">\\n              {{ result }}\\n            </div>\\n          </div>\\n        </mat-card-content>\\n      </mat-card>\\n      <div class=\\\"query-box\\\">\\n        <mat-card>\\n          <mat-card-header>\\n            <mat-card-title>Sold Packages</mat-card-title>\\n            <mat-card-subtitle>\\n              you can retrieve all sold packages by clicking on the\\n              <em>Query</em> button\\n            </mat-card-subtitle>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <div *ngIf=\\\"salePerforming\\\" class=\\\"lds-roller\\\">\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n              <div></div>\\n            </div>\\n            <table\\n              *ngIf=\\\"!salePerforming\\\"\\n              mat-table\\n              [dataSource]=\\\"sales\\\"\\n              class=\\\"mat-elevation-z8\\\"\\n            >\\n              <ng-container matColumnDef=\\\"packageId\\\">\\n                <th mat-header-cell *matHeaderCellDef>Package Id</th>\\n                <td mat-cell *matCellDef=\\\"let element\\\">{{ element.packageId }}</td>\\n              </ng-container>\\n              <tr mat-header-row *matHeaderRowDef=\\\"saleColumns\\\"></tr>\\n              <tr mat-row *matRowDef=\\\"let row; columns: saleColumns\\\"></tr>\\n            </table>\\n            <div *ngIf=\\\"saleError !== ''\\\" class=\\\"error-box\\\">\\n              {{ saleError }}\\n            </div>\\n          </mat-card-content>\\n          <mat-card-actions>\\n            <button type=\\\"button\\\" mat-button class=\\\"button clear-btn\\\" (click)=\\\"clearSales()\\\">\\n              Clear\\n            </button>\\n            <button type=\\\"button\\\" mat-button class=\\\"button query-btn\\\" (click)=\\\"getSales()\\\">\\n              Query\\n            </button>\\n          </mat-card-actions>\\n        </mat-card>\\n      </div>\\n    </div>\\n  </mat-tab>\\n\\n  <!-- PROVENANCE -->\\n  <mat-tab label=\\\"Provenance\\\">\\n    <h2>\\n      You can query the provenance of a specific package providing its identifier\\n      and clicking on the\\n      <em>Get Provenance</em> button.\\n      Click on a specific node to get more information about it.\\n    </h2>\\n    <div class=\\\"prov-wrapper\\\">\\n      <div class=\\\"prov-form-box mat-elevation-z3\\\">\\n        <form\\n          [formGroup]=\\\"provenanceForm\\\"\\n          (ngSubmit)=\\\"retrieveProvenance(provenanceForm.value)\\\"\\n        >\\n          <mat-form-field>\\n            <input\\n              matInput\\n              formControlName=\\\"packageId\\\"\\n              placeholder=\\\"Package Id..\\\"\\n            />\\n          </mat-form-field>\\n          <button mat-button class=\\\"submit-btn button\\\" type=\\\"submit\\\">Get Provenance</button>\\n          <button mat-button class=\\\"clear-btn button\\\" type=\\\"button\\\" (click)=\\\"clearProvenance()\\\">Clear</button>\\n        </form>\\n        <div class=\\\"node-info\\\">\\n          <h3 *ngIf=\\\"showInfo === 'selling'\\\"> Selling Occurence </h3>\\n          <table\\n            mat-table\\n            *ngIf=\\\"showInfo === 'selling'\\\"\\n            [dataSource]=\\\"salesProv\\\"\\n            class=\\\"mat-elevation-z8\\\"\\n          >\\n            <ng-container matColumnDef=\\\"isoTimestamp\\\">\\n              <th mat-header-cell *matHeaderCellDef>ISO Timestamp</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.isoTimestamp }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"packageId\\\">\\n              <th mat-header-cell *matHeaderCellDef>Package Id</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.occurrence.packageId }}</td>\\n            </ng-container>\\n            <tr mat-header-row *matHeaderRowDef=\\\"saleProvColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: saleProvColumns\\\"></tr>\\n          </table>\\n          <h3 *ngIf=\\\"showInfo === 'inventory'\\\"> Inventory Occurence </h3>\\n          <table\\n            mat-table\\n            *ngIf=\\\"showInfo === 'inventory'\\\"\\n            [dataSource]=\\\"entriesProv\\\"\\n            class=\\\"mat-elevation-z8\\\"\\n          >\\n            <ng-container matColumnDef=\\\"isoTimestamp\\\">\\n              <th mat-header-cell *matHeaderCellDef>ISO Timestamp</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.isoTimestamp }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"packageId\\\">\\n              <th mat-header-cell *matHeaderCellDef>Package Id</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.occurrence.packageId }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"retailerName\\\">\\n              <th mat-header-cell *matHeaderCellDef>Retailer Name</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.occurrence.retailerName }}</td>\\n            </ng-container>\\n            <tr mat-header-row *matHeaderRowDef=\\\"entryProvColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: entryProvColumns\\\"></tr>\\n          </table>\\n          <h3 *ngIf=\\\"showInfo === 'transportation'\\\"> Transportation Occurence </h3>\\n          <table\\n            mat-table\\n            *ngIf=\\\"showInfo === 'transportation'\\\"\\n            [dataSource]=\\\"transportationsProv\\\"\\n            class=\\\"mat-elevation-z8\\\"\\n          >\\n            <ng-container matColumnDef=\\\"isoTimestamp\\\">\\n              <th mat-header-cell *matHeaderCellDef>ISO Timestamp</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.isoTimestamp }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"packageId\\\">\\n              <th mat-header-cell *matHeaderCellDef>Package Id</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.occurrence.packageId }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"toLocation\\\">\\n              <th mat-header-cell *matHeaderCellDef>To Location</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{ element.occurrence.toLocation }}\\n              </td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"distributorName\\\">\\n              <th mat-header-cell *matHeaderCellDef>\\n                Distributor Name\\n              </th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{ element.occurrence.distributorName }}\\n              </td>\\n            </ng-container>\\n            <tr mat-header-row *matHeaderRowDef=\\\"transportationProvColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: transportationProvColumns\\\"></tr>\\n          </table>\\n          <h3 *ngIf=\\\"showInfo === 'package'\\\"> Packaging Occurence </h3>\\n          <table\\n            mat-table\\n            *ngIf=\\\"showInfo === 'package'\\\"\\n            [dataSource]=\\\"packagesProv\\\"\\n            class=\\\"mat-elevation-z8\\\"\\n          >\\n            <ng-container matColumnDef=\\\"isoTimestamp\\\">\\n              <th mat-header-cell *matHeaderCellDef>ISO Timestamp</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.isoTimestamp }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"fishIds\\\">\\n              <th mat-header-cell *matHeaderCellDef>Fish Ids</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.occurrence.fishIds }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"packageId\\\">\\n              <th mat-header-cell *matHeaderCellDef>Package Id</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{ element.occurrence.packageId }}\\n              </td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"processingFacilityName\\\">\\n              <th mat-header-cell *matHeaderCellDef>\\n                Processing Facility Name\\n              </th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{ element.occurrence.processingFacilityName }}\\n              </td>\\n            </ng-container>\\n            <tr mat-header-row *matHeaderRowDef=\\\"packageProvColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: packageProvColumns\\\"></tr>\\n          </table>\\n          <h3 *ngIf=\\\"showInfo === 'shipment'\\\"> Fish Shipment Occurence </h3>\\n          <table\\n            mat-table\\n            *ngIf=\\\"showInfo === 'shipment'\\\"\\n            [dataSource]=\\\"shipmentsProv\\\"\\n            class=\\\"mat-elevation-z8\\\"\\n          >\\n            <ng-container matColumnDef=\\\"isoTimestamp\\\">\\n              <th mat-header-cell *matHeaderCellDef>ISO Timestamp</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.isoTimestamp }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"fishIds\\\">\\n              <th mat-header-cell *matHeaderCellDef>Fish Ids</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.occurrence.fishIds }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"toLocation\\\">\\n              <th mat-header-cell *matHeaderCellDef>To Location</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{ element.occurrence.toLocation }}\\n              </td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"shipmentCompanyName\\\">\\n              <th mat-header-cell *matHeaderCellDef>\\n                Shipment Company Name\\n              </th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{ element.occurrence.shipmentCompanyName }}\\n              </td>\\n            </ng-container>\\n            <tr mat-header-row *matHeaderRowDef=\\\"shipmentProvColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: shipmentProvColumns\\\"></tr>\\n          </table>\\n          <h3 *ngIf=\\\"showInfo === 'fish'\\\"> Fish Catching Occurences </h3>\\n          <table\\n            mat-table\\n            *ngIf=\\\"showInfo === 'fish'\\\"\\n            [dataSource]=\\\"fishesProv\\\"\\n            class=\\\"mat-elevation-z8\\\">\\n            <ng-container matColumnDef=\\\"isoTimestamp\\\">\\n              <th mat-header-cell *matHeaderCellDef>ISO Timestamp</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.isoTimestamp }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"fishId\\\">\\n              <th mat-header-cell *matHeaderCellDef>Fish Id</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.occurrence.fishId }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"location\\\">\\n              <th mat-header-cell *matHeaderCellDef>Location</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">{{ element.occurrence.location }}</td>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"fishermanName\\\">\\n              <th mat-header-cell *matHeaderCellDef>Fisherman Name</th>\\n              <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{ element.occurrence.fishermanName }}\\n              </td>\\n            </ng-container>\\n            <tr mat-header-row *matHeaderRowDef=\\\"fishProvColumns\\\"></tr>\\n            <tr mat-row *matRowDef=\\\"let row; columns: fishProvColumns\\\"></tr>\\n          </table>\\n        </div>\\n      </div>\\n      <div class=\\\"prov-result-box\\\">\\n        <div class=\\\"spinner\\\">\\n          <div *ngIf=\\\"performing\\\" class=\\\"lds-roller\\\">\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n            <div></div>\\n          </div>\\n        </div>\\n        <div *ngIf=\\\"!performing && error !== ''\\\" class=\\\"error-box\\\">\\n          <h3>{{ error }}</h3>\\n        </div>\\n        <div *ngIf=\\\"!performing && error === ''\\\" class=\\\"page\\\">\\n          <ngx-graph\\n            class=\\\"graph\\\"\\n            [links]=\\\"links\\\"\\n            [nodes]=\\\"nodes\\\"\\n            [clusters]=\\\"clusters\\\"\\n            [layout]=\\\"dagre\\\"\\n            [curve]=\\\"curve\\\"\\n            [draggingEnabled]=\\\"false\\\"\\n            [panningEnabled]=\\\"true\\\"\\n            [enableZoom]=\\\"false\\\"\\n            [panOnZoom]=\\\"false\\\"\\n            [autoZoom]=\\\"true\\\"\\n            [autoCenter]=\\\"true\\\"\\n            [update$]=\\\"update$\\\"\\n            [center$]=\\\"center$\\\"\\n            [zoomToFit$]=\\\"zoomToFit$\\\"\\n          >\\n    \\n            <ng-template #defsTemplate>\\n              <svg:marker id=\\\"arrow\\\" viewBox=\\\"0 -5 10 10\\\" refX=\\\"8\\\" refY=\\\"0\\\" markerWidth=\\\"4\\\" markerHeight=\\\"4\\\" orient=\\\"auto\\\">\\n                <svg:path d=\\\"M0,-5L10,0L0,5\\\" class=\\\"arrow-head\\\" />\\n              </svg:marker>\\n            </ng-template>\\n\\n            <ng-template #clusterTemplate let-cluster>\\n              <svg:g class=\\\"node cluster\\\">\\n                <svg:rect rx=\\\"5\\\" ry=\\\"5\\\" [attr.width]=\\\"cluster.dimension.width\\\" [attr.height]=\\\"cluster.dimension.height\\\" [attr.fill]=\\\"cluster.data.color\\\" />\\n              </svg:g>\\n            </ng-template>\\n    \\n            <ng-template #nodeTemplate let-node>\\n              <svg:g class=\\\"node node-box\\\" (click)=\\\"onNodeClicked($event)\\\">\\n                <svg:ellipse id=\\\"{{node.id}}\\\" [attr.cx]=\\\"node.dimension.width/(1.75)\\\" [attr.cy]=\\\"node.dimension.height/(1.75)\\\" [attr.rx]=\\\"node.dimension.width/(1.5)\\\" [attr.ry]=\\\"node.dimension.height/(1.5)\\\" [attr.fill]=\\\"node.data.color\\\" />\\n                <!-- <svg:rect id=\\\"{{node.id}}\\\" [attr.width]=\\\"node.dimension.width\\\" [attr.height]=\\\"node.dimension.height\\\" [attr.fill]=\\\"node.data.color\\\" /> -->\\n                <svg:text id=\\\"{{node.id}}\\\" alignment-baseline=\\\"central\\\" [attr.x]=\\\"15\\\" [attr.y]=\\\"node.dimension.height/(1.5)\\\">{{node.label}}</svg:text>\\n              </svg:g>\\n            </ng-template>\\n    \\n            <ng-template #linkTemplate let-link>\\n              <svg:g class=\\\"edge\\\" (click)=\\\"onEdgeClicked($event)\\\">\\n                <svg:path class=\\\"line\\\" stroke-width=\\\"2\\\" marker-end=\\\"url(#arrow)\\\">\\n                </svg:path>\\n                <svg:text class=\\\"edge-label\\\" text-anchor=\\\"middle\\\">\\n                  <textPath class=\\\"text-path\\\" [attr.href]=\\\"'#' + link.id\\\" [style.dominant-baseline]=\\\"link.dominantBaseline\\\" startOffset=\\\"50%\\\">\\n                    {{link.label}}\\n                  </textPath>\\n                </svg:text>\\n              </svg:g>\\n            </ng-template>\\n          </ngx-graph>\\n        </div>\\n      </div>\\n    </div>\\n  </mat-tab>\\n</mat-tab-group>\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, from, of } from 'rxjs';\nimport { environment } from '../environments/environment';\nimport Fish from './models/Fish';\nimport FishShipment from './models/FishShipment';\nimport FishPackage from './models/FishPackage';\nimport PackageTransportation from './models/PackageTransportation';\nimport InventoryEntry from './models/InventoryEntry';\nimport PackageSelling from './models/PackageSelling';\nimport SeafoodProvenance from './models/SeafoodProvenance';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private http: HttpClient) { }\n\n  /********************************** FISH **********************************/\n\n  public registerCapturedFish(fish: Fish): Observable<string> {\n    const url = `${environment.apiUrl}/seafood/fish`;\n    return this.http.post(url, fish, { responseType: 'text' });\n  }\n\n  public getAllRegisteredFishes(): Observable<Fish[]> {\n    const url = `${environment.apiUrl}/seafood/fish`;\n    return this.http.get<Fish[]>(url);\n  }\n\n  /******************************** SHIPMENT ********************************/\n\n  public registerShipment(fishShipment: FishShipment): Observable<string>  {\n    const url = `${environment.apiUrl}/seafood/shipment`;\n    return this.http.post(url, fishShipment, { responseType: 'text' });\n  }\n\n  public getAllRegisteredShipments(): Observable<FishShipment[]> {\n    const url = `${environment.apiUrl}/seafood/shipment`;\n    return this.http.get<FishShipment[]>(url);\n  }\n\n  /******************************* PACKAGING ********************************/\n\n  public registerPackage(fishPackage: FishPackage): Observable<string>  {\n    const url = `${environment.apiUrl}/seafood/package`;\n    return this.http.post(url, fishPackage, { responseType: 'text' });\n  }\n\n  public getAllRegisteredPackages(): Observable<FishPackage[]> {\n    const url = `${environment.apiUrl}/seafood/package`;\n    return this.http.get<FishPackage[]>(url);\n  }\n\n  /***************************** TRANSPORTATION *****************************/\n\n  public registerTransportation(packageTransportation: PackageTransportation): Observable<string>  {\n    const url = `${environment.apiUrl}/seafood/transportation`;\n    return this.http.post(url, packageTransportation, { responseType: 'text' });\n  }\n\n  public getAllRegisteredTransportations(): Observable<PackageTransportation[]> {\n    const url = `${environment.apiUrl}/seafood/transportation`;\n    return this.http.get<PackageTransportation[]>(url);\n  }\n\n  /******************************* INVENTORY ********************************/\n\n  public registerInInventory(inventoryEntry: InventoryEntry): Observable<string>  {\n    const url = `${environment.apiUrl}/seafood/inventory`;\n    return this.http.post(url, inventoryEntry, { responseType: 'text' });\n  }\n\n  public getAllPackagesRegisteredInInventories(): Observable<InventoryEntry[]> {\n    const url = `${environment.apiUrl}/seafood/inventory`;\n    return this.http.get<InventoryEntry[]>(url);\n  }\n\n  /******************************** SELLING *********************************/\n\n  public registerSelling(packageSelling: PackageSelling): Observable<string>  {\n    const url = `${environment.apiUrl}/seafood/selling`;\n    return this.http.post(url, packageSelling, { responseType: 'text' });\n  }\n\n  public getAllSoldPackages(): Observable<PackageSelling[]> {\n    const url = `${environment.apiUrl}/seafood/selling`;\n    return this.http.get<PackageSelling[]>(url);\n  }\n\n  /******************************* PROVENANCE *******************************/\n\n  public retrieveProvenance(packageId: string): Observable<SeafoodProvenance> {\n    const url = `${environment.apiUrl}/seafood/provenance?packageId=${packageId}`;\n    return this.http.get<SeafoodProvenance>(url);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { IndexComponent } from './pages/index/index.component';\nimport { SeafoodComponent } from './pages/seafood/seafood.component';\nimport { DairyComponent } from './pages/dairy/dairy.component';\n\n\nconst routes: Routes = [\n  { path: '', component: IndexComponent },\n  { path: 'seafood', component: SeafoodComponent },\n  { path: 'dairy', component: DairyComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule { }\n","export default \".wrapper {\\r\\n  display: -webkit-box;\\r\\n  display: flex;\\r\\n  margin-top: 30px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxvQkFBYTtFQUFiLGFBQWE7RUFDYixnQkFBZ0I7QUFDbEIiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi53cmFwcGVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIG1hcmdpbi10b3A6IDMwcHg7XHJcbn1cclxuIl19 */\"","import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'Smart Contract Invocation Protocol (SCIP) Case Study';\n\n  ngOnInit(): void {\n  }\n\n  constructor() {\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MaterialModule } from './material.module';\nimport { ApiService } from './api.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SeafoodComponent } from './pages/seafood/seafood.component';\nimport { DairyComponent } from './pages/dairy/dairy.component';\nimport { IndexComponent } from './pages/index/index.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SeafoodComponent,\n    DairyComponent,\n    IndexComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    MaterialModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [ApiService, HttpClientModule],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import { NgModule } from '@angular/core';\r\n\r\n// tslint:disable-next-line:max-line-length\r\nimport { MatButtonModule, MatCardModule, MatDividerModule, MatChipsModule, MatIconModule, MatTableModule, MatSlideToggleModule, MatDrawerContent, MatSidenavModule } from '@angular/material';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { NgxGraphModule } from '@swimlane/ngx-graph';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    MatListModule,\r\n    MatInputModule,\r\n    MatTabsModule,\r\n    MatSnackBarModule,\r\n    MatChipsModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatSlideToggleModule,\r\n    NgxGraphModule,\r\n    NgxChartsModule\r\n  ],\r\n  exports: [\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    MatListModule,\r\n    MatInputModule,\r\n    MatTabsModule,\r\n    MatChipsModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatSlideToggleModule,\r\n    NgxGraphModule,\r\n    NgxChartsModule\r\n  ]\r\n})\r\nexport class MaterialModule {\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2RhaXJ5L2RhaXJ5LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dairy',\n  templateUrl: './dairy.component.html',\n  styleUrls: ['./dairy.component.css']\n})\nexport class DairyComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \".subtitle {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: center;\\n          align-items: center;\\n}\\n\\n.main {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: horizontal;\\n  -webkit-box-direction: normal;\\n          flex-direction: row;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  -webkit-box-pack: center;\\n          justify-content: center;\\n}\\n\\n.main button {\\n  margin: 20px;\\n  width: 20%;\\n  height: 180px;\\n}\\n\\n.main .to-seafood {\\n  background-color: rgb(45, 198, 209);\\n}\\n\\n.main .to-dairy {\\n  background-color: rgb(255, 228, 196);\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvaW5kZXgvaW5kZXguY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG9CQUFhO0VBQWIsYUFBYTtFQUNiLDRCQUFzQjtFQUF0Qiw2QkFBc0I7VUFBdEIsc0JBQXNCO0VBQ3RCLHlCQUFtQjtVQUFuQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxvQkFBYTtFQUFiLGFBQWE7RUFDYiw4QkFBbUI7RUFBbkIsNkJBQW1CO1VBQW5CLG1CQUFtQjtFQUNuQix5QkFBbUI7VUFBbkIsbUJBQW1CO0VBQ25CLHdCQUF1QjtVQUF2Qix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osVUFBVTtFQUNWLGFBQWE7QUFDZjs7QUFFQTtFQUNFLG1DQUFtQztBQUNyQzs7QUFFQTtFQUNFLG9DQUFvQztBQUN0QyIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2luZGV4L2luZGV4LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3VidGl0bGUge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4ubWFpbiB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG4ubWFpbiBidXR0b24ge1xuICBtYXJnaW46IDIwcHg7XG4gIHdpZHRoOiAyMCU7XG4gIGhlaWdodDogMTgwcHg7XG59XG5cbi5tYWluIC50by1zZWFmb29kIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDQ1LCAxOTgsIDIwOSk7XG59XG5cbi5tYWluIC50by1kYWlyeSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDIyOCwgMTk2KTtcbn1cbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-index',\n  templateUrl: './index.component.html',\n  styleUrls: ['./index.component.css']\n})\nexport class IndexComponent implements OnInit {\n\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  toSeafood() {\n    this.router.navigate(['/seafood']);\n  }\n\n  toDairy() {\n    this.router.navigate(['/dairy']);\n  }\n}\n","export default \".head-box {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: center;\\n          align-items: center;\\n}\\n\\n.wrapper {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: horizontal;\\n  -webkit-box-direction: normal;\\n          flex-direction: row;\\n  margin-top: 30px;\\n}\\n\\nform {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n}\\n\\n.form-card {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  width: 45%;\\n  padding: 10px;\\n  background-color: rgb(206, 204, 204);\\n}\\n\\n.form-card .form-box {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: stretch;\\n          align-items: stretch;\\n}\\n\\n.result-box {\\n  margin-top: 15px;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  -webkit-box-pack: center;\\n          justify-content: center;\\n}\\n\\n.query-box {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  width: 55%;\\n}\\n\\nmat-card-content {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: center;\\n          align-items: center;\\n}\\n\\nmat-card-content table {\\n  width: 100%;\\n}\\n\\nmat-card-content .error-box {\\n  text-align: center;\\n  margin-top: 15px;\\n  color: rgb(192, 4, 4);\\n}\\n\\nmat-card {\\n  background-color: rgb(206, 204, 204);\\n  margin: 10px;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n}\\n\\nmat-card mat-card-actions {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: horizontal;\\n  -webkit-box-direction: normal;\\n          flex-direction: row;\\n  -webkit-box-align: center;\\n          align-items: center;\\n}\\n\\nmat-card mat-card-actions button {\\n  width: 50%;\\n}\\n\\nmat-card mat-card-actions .clear-btn {\\n  background-color: rgb(235, 139, 139);\\n}\\n\\nmat-card mat-card-actions .query-btn {\\n  background-color: rgb(174, 219, 144);\\n  width: 50%;\\n}\\n\\n.prov-wrapper {\\n  margin-top: 30px;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  width: 100%;\\n  margin: 50px;\\n}\\n\\n.prov-form-box {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: stretch;\\n          align-items: stretch;\\n  width: 70%;\\n  padding: 10px;\\n  margin: 15px 15px 5px 15px;\\n  background-color: rgb(206, 204, 204);\\n}\\n\\n.prov-form-box form > .submit-btn {\\n  background-color: rgb(231, 225, 225);\\n  margin: 10px 10px 4px 10px;\\n}\\n\\n.prov-form-box form > .clear-btn {\\n  background-color: rgb(235, 139, 139);\\n  margin: 4px 10px 10px 10px;\\n}\\n\\n.prov-result-box {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: stretch;\\n          align-items: stretch;\\n  align-content: center;\\n  width: 100%;\\n}\\n\\n.prov-result-box .spinner {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  margin: 40px;\\n}\\n\\n.prov-result-box .error-box {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: center;\\n          align-items: center;\\n}\\n\\n.prov-result-box .error-box h3 {\\n  color: rgb(192, 4, 4);\\n}\\n\\n.prov-result-box .prov-tables-box {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: stretch;\\n          align-items: stretch;\\n}\\n\\n.prov-result-box .prov-tables-box table {\\n  width: 100%;\\n  margin: 10px;\\n}\\n\\n/* GRAPH */\\n\\n.page {\\n  width: 100%;\\n  height: 100vh;\\n  overflow: hidden;\\n}\\n\\n.page .graph {\\n  pointer-events: none;\\n}\\n\\n.page .graph .node-box {\\n  pointer-events: all;\\n  cursor: pointer;\\n}\\n\\n.page .graph .node-box:hover {\\n  opacity: 0.5;\\n}\\n\\n.node-info {\\n  width: 100%;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-orient: vertical;\\n  -webkit-box-direction: normal;\\n          flex-direction: column;\\n  -webkit-box-align: stretch;\\n          align-items: stretch;\\n}\\n\\n.node-info table {\\n  width: 100%;\\n}\\n\\n:host ::ng-deep {\\n  display: block;\\n  height: inherit;\\n  width: inherit;\\n}\\n\\n:host ::ng-deep .cardContainer {\\n  height: 100;\\n  width: 150;\\n  display: block;\\n}\\n\\n:host ::ng-deep .cardContainer .name {\\n  font-size: 24px;\\n}\\n\\n:host ::ng-deep .cardContainer label {\\n  display: block;\\n  text-align: center;\\n  font-size: 20px;\\n  margin-top: 4px;\\n  margin-bottom: 8px;\\n}\\n\\n:host ::ng-deep .linkMidpoint ellipse {\\n  fill: white;\\n  stroke: black;\\n  stroke-width: 1;\\n}\\n\\n:host ::ng-deep .linkMidpoint text {\\n  stroke: transparent;\\n  fill: black;\\n  text-anchor: middle;\\n  font-size: 10px;\\n}\\n\\n/* SPINNER */\\n\\n.lds-roller {\\n  display: inline-block;\\n  position: relative;\\n  width: 80px;\\n  height: 80px;\\n}\\n\\n.lds-roller div {\\n  -webkit-animation: lds-roller 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\\n          animation: lds-roller 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\\n  -webkit-transform-origin: 40px 40px;\\n          transform-origin: 40px 40px;\\n}\\n\\n.lds-roller div:after {\\n  content: \\\" \\\";\\n  display: block;\\n  position: absolute;\\n  width: 7px;\\n  height: 7px;\\n  border-radius: 50%;\\n  background: black;\\n  margin: -4px 0 0 -4px;\\n}\\n\\n.lds-roller div:nth-child(1) {\\n  -webkit-animation-delay: -0.036s;\\n          animation-delay: -0.036s;\\n}\\n\\n.lds-roller div:nth-child(1):after {\\n  top: 63px;\\n  left: 63px;\\n}\\n\\n.lds-roller div:nth-child(2) {\\n  -webkit-animation-delay: -0.072s;\\n          animation-delay: -0.072s;\\n}\\n\\n.lds-roller div:nth-child(2):after {\\n  top: 68px;\\n  left: 56px;\\n}\\n\\n.lds-roller div:nth-child(3) {\\n  -webkit-animation-delay: -0.108s;\\n          animation-delay: -0.108s;\\n}\\n\\n.lds-roller div:nth-child(3):after {\\n  top: 71px;\\n  left: 48px;\\n}\\n\\n.lds-roller div:nth-child(4) {\\n  -webkit-animation-delay: -0.144s;\\n          animation-delay: -0.144s;\\n}\\n\\n.lds-roller div:nth-child(4):after {\\n  top: 72px;\\n  left: 40px;\\n}\\n\\n.lds-roller div:nth-child(5) {\\n  -webkit-animation-delay: -0.18s;\\n          animation-delay: -0.18s;\\n}\\n\\n.lds-roller div:nth-child(5):after {\\n  top: 71px;\\n  left: 32px;\\n}\\n\\n.lds-roller div:nth-child(6) {\\n  -webkit-animation-delay: -0.216s;\\n          animation-delay: -0.216s;\\n}\\n\\n.lds-roller div:nth-child(6):after {\\n  top: 68px;\\n  left: 24px;\\n}\\n\\n.lds-roller div:nth-child(7) {\\n  -webkit-animation-delay: -0.252s;\\n          animation-delay: -0.252s;\\n}\\n\\n.lds-roller div:nth-child(7):after {\\n  top: 63px;\\n  left: 17px;\\n}\\n\\n.lds-roller div:nth-child(8) {\\n  -webkit-animation-delay: -0.288s;\\n          animation-delay: -0.288s;\\n}\\n\\n.lds-roller div:nth-child(8):after {\\n  top: 56px;\\n  left: 12px;\\n}\\n\\n@-webkit-keyframes lds-roller {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n  }\\n}\\n\\n@keyframes lds-roller {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n  }\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validator, FormControl, Validators } from '@angular/forms';\nimport { ApiService } from 'src/app/api.service';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport Fish from 'src/app/models/Fish';\nimport FishPackage from 'src/app/models/FishPackage';\nimport FishShipment from 'src/app/models/FishShipment';\nimport PackageTransportation from 'src/app/models/PackageTransportation';\nimport PackageSelling from 'src/app/models/PackageSelling';\nimport InventoryEntry from 'src/app/models/InventoryEntry';\nimport SeafoodOccurrence from 'src/app/models/SeafoodOccurrence';\nimport * as shape from 'd3-shape';\nimport { Node, Edge, Layout, ClusterNode } from '@swimlane/ngx-graph';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-seafood',\n  templateUrl: './seafood.component.html',\n  styleUrls: ['./seafood.component.css']\n})\nexport class SeafoodComponent implements OnInit {\n  title = 'Seafood Supply Chain';\n\n  fishForm: FormGroup;\n  packageForm: FormGroup;\n  shipmentForm: FormGroup;\n  inventoryEntryForm: FormGroup;\n  sellingForm: FormGroup;\n  transportationForm: FormGroup;\n  provenanceForm: FormGroup;\n\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\n  idsForPackage: string[] = [];\n  idsForShipment: string[] = [];\n  selectable = true;\n  removable = true;\n  addOnBlur = true;\n\n  performing = false;\n  result: any = null;\n  prevIndex = 0;\n\n  fishes: Fish[] = [];\n  fishColumns = ['fishId', 'location', 'fishermanName'];\n  fishPerforming = false;\n  fishError = '';\n  packages: FishPackage[] = [];\n  packageColumns = ['fishIds', 'packageId', 'processingFacilityName'];\n  packagePerforming = false;\n  packageError = '';\n  shipments: FishShipment[] = [];\n  shipmentColumns = ['fishIds', 'toLocation', 'shipmentCompanyName'];\n  shipmentPerforming = false;\n  shipmentError = '';\n  transportations: PackageTransportation[] = [];\n  transportationColumns = ['packageId', 'toLocation', 'distributorName'];\n  transportationPerforming = false;\n  transportationError = '';\n  sales: PackageSelling[] = [];\n  saleColumns = ['packageId'];\n  salePerforming = false;\n  saleError = '';\n  entries: InventoryEntry[] = [];\n  entryColumns = ['packageId', 'retailerName'];\n  entryPerforming = false;\n  entryError = '';\n\n\n  provenanceFishes: SeafoodOccurrence<Fish>[] = [];\n  fishProvColumns = ['isoTimestamp', 'fishId', 'location', 'fishermanName'];\n  fishesProv = [];\n\n  provenanceShipments: SeafoodOccurrence<FishShipment>[] = [];\n  shipmentProvColumns = ['isoTimestamp', 'fishIds', 'toLocation', 'shipmentCompanyName'];\n  shipmentsProv = [];\n\n  provenancePackage: SeafoodOccurrence<FishPackage> = null;\n  packageProvColumns = ['isoTimestamp', 'fishIds', 'packageId', 'processingFacilityName'];\n  packagesProv = [];\n\n  provenanceTransportation: SeafoodOccurrence<PackageTransportation> = null;\n  transportationProvColumns = ['isoTimestamp', 'packageId', 'toLocation', 'distributorName'];\n  transportationsProv = [];\n\n  provenanceSelling: SeafoodOccurrence<PackageSelling> = null;\n  saleProvColumns = ['isoTimestamp', 'packageId'];\n  salesProv = [];\n\n  provenanceEntry: SeafoodOccurrence<InventoryEntry> = null;\n  entryProvColumns = ['isoTimestamp', 'packageId', 'retailerName'];\n  entriesProv = [];\n\n  error = '';\n\n  curve = shape.curveCardinal;\n  size = [1000, 750];\n  links: Edge[] = [];\n  nodes: Node[] = [];\n  clusters: ClusterNode[] = [];\n  update$: Subject<boolean> = new Subject();\n  center$: Subject<boolean> = new Subject();\n  zoomToFit$: Subject<boolean> = new Subject();\n  showInfo = '';\n\n  constructor(private apiService: ApiService, private formBuilder: FormBuilder) {\n    this.fishForm = this.formBuilder.group({\n      fishId: new FormControl('', Validators.required),\n      location: new FormControl('', Validators.required),\n      fishermanName: new FormControl('', Validators.required),\n    });\n    this.packageForm = this.formBuilder.group({\n      fishIds: [this.idsForPackage],\n      packageId: new FormControl('', Validators.required),\n      processingFacilityName: new FormControl('', Validators.required),\n    });\n    this.packageForm.controls.fishIds.setValue(this.idsForPackage);\n\n    this.shipmentForm = this.formBuilder.group({\n      fishIds: [this.idsForShipment],\n      toLocation: new FormControl('', Validators.required),\n      shipmentCompanyName: new FormControl('', Validators.required),\n    });\n    this.shipmentForm.controls.fishIds.setValue(this.idsForShipment);\n\n    this.transportationForm = this.formBuilder.group({\n      packageId: new FormControl('', Validators.required),\n      toLocation: new FormControl('', Validators.required),\n      distributorName: new FormControl('', Validators.required),\n    });\n    this.inventoryEntryForm = this.formBuilder.group({\n      packageId: new FormControl('', Validators.required),\n      retailerName: new FormControl('', Validators.required),\n    });\n    this.sellingForm = this.formBuilder.group({\n      packageId: new FormControl('', Validators.required),\n    });\n    this.provenanceForm = this.formBuilder.group({\n      packageId: new FormControl('', Validators.required),\n    });\n  }\n\n  ngOnInit() {\n    this.getFishes();\n  }\n\n  onRegisterFish(fish: any) {\n    this.performing = true;\n    if (this.fishForm.valid) {\n      this.apiService.registerCapturedFish(fish)\n      .subscribe(\n        res => {\n          this.result = res;\n          this.performing = false;\n          this.fishForm.reset();\n          this.getFishes();\n        },\n        err => {\n          this.result = err.message;\n          this.performing = false;\n      });\n    } else {\n      this.result = 'Invalid form!';\n      this.performing = false;\n    }\n  }\n\n  onRegisterPackage(packageFish: any) {\n    this.performing = true;\n    if (this.packageForm.valid && packageFish.fishIds.length > 0) {\n      this.apiService.registerPackage(packageFish)\n        .subscribe(\n          res => {\n            this.result = res;\n            this.performing = false;\n            this.packageForm.reset();\n            this.getPackages();\n          },\n          err => {\n            this.result = err.message;\n            this.performing = false;\n        });\n    } else {\n      this.result = 'Invalid form!';\n      this.performing = false;\n    }\n  }\n\n  onRegisterShipment(shipment: any) {\n    this.performing = true;\n    if (this.shipmentForm.valid && shipment.fishIds.length > 0) {\n      this.apiService.registerShipment(shipment)\n      .subscribe(\n        res => {\n          this.result = res;\n          this.performing = false;\n          this.shipmentForm.reset();\n          this.getShipments();\n        },\n        err => {\n          this.result = err.message;\n          this.performing = false;\n      });\n    } else {\n      this.result = 'Invalid form!';\n      this.performing = false;\n    }\n  }\n\n  onRegisterTransportation(transportation: any) {\n    this.performing = true;\n    if (this.transportationForm.valid) {\n      this.apiService.registerTransportation(transportation)\n      .subscribe(\n        res => {\n          this.result = res;\n          this.performing = false;\n          this.transportationForm.reset();\n          this.getTransportations();\n        },\n        err => {\n          this.result = err.message;\n          this.performing = false;\n      });\n    } else {\n      this.result = 'Invalid form!';\n      this.performing = false;\n    }\n  }\n\n  onRegisterInInventory(entry: any) {\n    this.performing = true;\n    if (this.inventoryEntryForm.valid) {\n      this.apiService.registerInInventory(entry)\n      .subscribe(\n        res => {\n          this.result = res;\n          this.performing = false;\n          this.inventoryEntryForm.reset();\n          this.getEntries();\n        },\n        err => {\n          this.result = err.message;\n          this.performing = false;\n      });\n    } else {\n      this.result = 'Invalid form!';\n      this.performing = false;\n    }\n  }\n\n  onRegisterSelling(sale: any) {\n    this.performing = true;\n    if (this.sellingForm.valid) {\n      this.apiService.registerSelling(sale)\n      .subscribe(\n        res => {\n          this.result = res;\n          this.performing = false;\n          this.sellingForm.reset();\n          this.getSales();\n        },\n        err => {\n          this.result = err.message;\n          this.performing = false;\n      });\n    } else {\n      this.result = 'Invalid form!';\n      this.performing = false;\n    }\n  }\n\n  getFishes() {\n    this.fishPerforming = true;\n    this.apiService.getAllRegisteredFishes()\n      .subscribe(\n        res => {\n          this.fishes = res;\n          this.fishPerforming = false;\n        },\n        err => {\n          this.fishError = err.message;\n          this.fishPerforming = false;\n        }\n      );\n  }\n\n  clearFishes() {\n    this.fishes = [];\n  }\n\n  getPackages() {\n    this.packagePerforming = true;\n    this.apiService.getAllRegisteredPackages()\n      .subscribe(\n        res => {\n          this.packages = res;\n          this.packagePerforming = false;\n        },\n        err => {\n          this.packageError = err.message;\n          this.packagePerforming = false;\n        }\n      );\n  }\n\n  clearPackages() {\n    this.packages = [];\n  }\n\n  getShipments() {\n    this.shipmentPerforming = true;\n    this.apiService.getAllRegisteredShipments()\n      .subscribe(\n        res => {\n          this.shipments = res;\n          this.shipmentPerforming = false;\n        },\n        err => {\n          this.shipmentError = err.message;\n          this.shipmentPerforming = false;\n        }\n      );\n  }\n\n  clearShipments() {\n    this.shipments = [];\n  }\n\n  getTransportations() {\n    this.transportationPerforming = true;\n    this.apiService.getAllRegisteredTransportations()\n      .subscribe(\n        res => {\n          this.transportations = res;\n          this.transportationPerforming = false;\n        },\n        err => {\n          this.transportationError = err.message;\n          this.transportationPerforming = false;\n        }\n      );\n  }\n\n  clearTransportations() {\n    this.transportations = [];\n  }\n\n  getSales() {\n    console.log('retrieving sales..');\n    this.salePerforming = true;\n    const obs = this.apiService.getAllSoldPackages();\n\n    obs.subscribe(\n        res => {\n          this.sales = res;\n          this.salePerforming = false;\n        },\n        err => {\n          this.saleError = err.message;\n          this.salePerforming = false;\n        }\n      );\n  }\n\n  clearSales() {\n    this.sales = [];\n  }\n\n  getEntries() {\n    this.entryPerforming = true;\n    this.apiService.getAllPackagesRegisteredInInventories()\n      .subscribe(\n        res => {\n          this.entries = res;\n          this.entryPerforming = false;\n        },\n        err => {\n          this.entryError = err.message;\n          this.entryPerforming = false;\n        }\n      );\n  }\n\n  clearEntries() {\n    this.entries = [];\n  }\n\n  retrieveProvenance(provenanceForm) {\n    this.clearGraph();\n    const id = provenanceForm.packageId;\n    this.performing = true;\n    if (this.provenanceForm.valid) {\n      this.apiService.retrieveProvenance(id)\n      .subscribe(\n        res => {\n          if (res.packagingOccurrence == null) {\n            this.error = 'Package not found';\n          } else {\n            this.provenanceFishes = res.fishCatchingOccurrences ? res.fishCatchingOccurrences : [];\n            for (const fish of this.provenanceFishes) {\n              this.nodes = [\n                ...this.nodes,\n                {\n                  id: fish.occurrence.fishId,\n                  label: 'Fish Captured',\n                  data: {\n                    isoTimestamp: fish.isoTimestamp,\n                    location: fish.occurrence.location,\n                    fishermanName: fish.occurrence.fishermanName,\n                    color: '#3533ff',\n                    type: 'fish',\n                  }\n                }\n              ];\n            }\n\n            this.provenanceShipments = res.fishShipmentOccurrences ? res.fishShipmentOccurrences : [];\n            for (const shipment of this.provenanceShipments) {\n              const shipmentNodeId = shipment.occurrence.fishIds.toString();\n              this.nodes = [\n                ...this.nodes,\n                {\n                  id: shipmentNodeId,\n                  label: 'Fishes Shipped',\n                  data: {\n                    isoTimestamp: shipment.isoTimestamp,\n                    toLocation: shipment.occurrence.toLocation,\n                    shipmentCompanyName: shipment.occurrence.shipmentCompanyName,\n                    color: '#33fbff',\n                    type: 'shipment',\n                  }\n                }\n              ];\n\n              for (const fishId of shipment.occurrence.fishIds) {\n                const check = this.nodes.filter(value => value.id === fishId);\n                if (check.length !== 0) {\n                  this.links = [\n                    ...this.links,\n                    {\n                      label: 'fish shipped',\n                      source: fishId,\n                      target: shipmentNodeId,\n                      data: {\n                        linkText: 'fish shipped',\n                      }\n                    }\n                  ];\n                }\n              }\n            }\n\n            this.provenancePackage = res.packagingOccurrence;\n            if (this.provenancePackage != null) {\n              const packageNodeId = 'package-' + this.provenancePackage.occurrence.packageId;\n              this.nodes = [\n                ...this.nodes,\n                {\n                  id: packageNodeId,\n                  label: 'Package ' + this.provenancePackage.occurrence.packageId,\n                  data: {\n                    isoTimestamp: this.provenancePackage.isoTimestamp,\n                    fishIds: this.provenancePackage.occurrence.fishIds,\n                    processingFacilityName: this.provenancePackage.occurrence.processingFacilityName,\n                    color: '#ff5733',\n                    type: 'package',\n                  }\n                }\n              ];\n\n              for (const fishId of this.provenancePackage.occurrence.fishIds) {\n                const check = this.nodes.filter(value => value.id === fishId);\n                if (check.length !== 0) {\n                  this.links = [\n                    ...this.links,\n                    {\n                      label: 'package registration',\n                      source: fishId,\n                      target: packageNodeId,\n                      data: {\n                        linkText: 'package registration',\n                      }\n                    }\n                  ];\n                }\n              }\n            }\n\n            this.provenanceTransportation = res.transportationOccurrence;\n            if (this.provenanceTransportation != null) {\n              const transportationNodeId = 'transport-' + this.provenanceTransportation.occurrence.packageId;\n              this.nodes = [\n                ...this.nodes,\n                {\n                  id: transportationNodeId,\n                  label: 'Package Transported',\n                  data: {\n                    isoTimestamp: this.provenanceTransportation.isoTimestamp,\n                    toLocation: this.provenanceTransportation.occurrence.toLocation,\n                    distributorName: this.provenanceTransportation.occurrence.distributorName,\n                    color: '#35ff33',\n                    type: 'transportation',\n                  }\n                }\n              ];\n\n              this.links = [\n                ...this.links,\n                {\n                  label: 'package transporting',\n                  source: 'package-' + this.provenanceTransportation.occurrence.packageId,\n                  target: transportationNodeId,\n                  data: {\n                    linkText: 'package transporting',\n                  }\n                }\n              ];\n            }\n\n            this.provenanceSelling = res.sellingOccurrence;\n            if (this.provenanceSelling != null) {\n              const sellingNodeId = 'selling-' + this.provenanceSelling.occurrence.packageId;\n              this.nodes = [\n                ...this.nodes,\n                {\n                  id: sellingNodeId,\n                  label: 'Package Sold',\n                  data: {\n                    isoTimestamp: this.provenanceSelling.isoTimestamp,\n                    color: '#f1ff33',\n                    type: 'selling',\n                  }\n                }\n              ];\n\n              this.links = [\n                ...this.links,\n                {\n                  label: 'package selling',\n                  source: 'package-' + this.provenanceSelling.occurrence.packageId,\n                  target: sellingNodeId,\n                  data: {\n                    linkText: 'package selling',\n                  }\n                }\n              ];\n            }\n\n            this.provenanceEntry = res.inventoryOccurrence;\n            if (this.provenanceEntry != null) {\n              const entryNodeId = 'entry-' + this.provenanceEntry.occurrence.packageId;\n              this.nodes = [\n                ...this.nodes,\n                {\n                  id: entryNodeId,\n                  label: 'Package Registered In Inventory',\n                  data: {\n                    isoTimestamp: this.provenanceEntry.isoTimestamp,\n                    retailerName: this.provenanceEntry.occurrence.retailerName,\n                    color: '#ff33de',\n                    type: 'inventory',\n                  }\n                }\n              ];\n\n              this.links = [\n                ...this.links,\n                {\n                  label: `package's inventory registration`,\n                  source: 'package-' + this.provenanceEntry.occurrence.packageId,\n                  target: entryNodeId,\n                  data: {\n                    linkText: `package's inventory registration`\n                  }\n                }\n              ];\n            }\n          }\n          this.performing = false;\n        },\n        err => {\n          this.error = err.message;\n          this.performing = false;\n        }\n      );\n    } else {\n      this.error = 'Missing package identifier!';\n      this.performing = false;\n    }\n  }\n\n  clearGraph() {\n    this.nodes = [];\n    this.links = [];\n    this.clusters = [];\n    this.showInfo = '';\n  }\n\n  clearProvenance() {\n    this.provenanceFishes = [];\n    this.fishesProv = [];\n    this.provenanceShipments = [];\n    this.shipmentsProv = [];\n    this.provenancePackage = null;\n    this.packagesProv = [];\n    this.provenanceTransportation = null;\n    this.transportationsProv = [];\n    this.provenanceSelling = null;\n    this.salesProv = [];\n    this.provenanceEntry = null;\n    this.entriesProv = [];\n    this.clearGraph();\n  }\n\n  removeIdFromPackage(id: string) {\n    const controller = this.packageForm.controls.fishIds;\n    const index = this.idsForPackage.indexOf(id);\n    if (index >= 0) {\n      this.idsForPackage.splice(index, 1);\n    }\n    controller.markAsDirty();\n  }\n\n  addIdInPackage(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n\n    // Add a new id\n    if ((value || '').trim()) {\n      this.idsForPackage.push(value);\n\n      this.packageForm.controls.fishIds.markAsDirty();\n      // Reset the input value\n      input.value = '';\n    }\n  }\n\n  removeIdFromShipment(id: string) {\n    const controller = this.shipmentForm.controls.fishIds;\n    const index = this.idsForShipment.indexOf(id);\n    if (index >= 0) {\n      this.idsForShipment.splice(index, 1);\n    }\n    controller.markAsDirty();\n  }\n\n  addIdInShipment(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n\n    // Add a new id\n    if ((value || '').trim()) {\n      this.idsForShipment.push(value);\n\n      this.shipmentForm.controls.fishIds.markAsDirty();\n      // Reset the input value\n      input.value = '';\n    }\n  }\n\n  onTabClick(event) {\n    if (event.index !== this.prevIndex) {\n      this.result = null;\n      this.error = '';\n      this.performing = false;\n      this.prevIndex = event.index;\n      this.fishError = this.packageError = this.shipmentError = this.transportationError = this.entryError = this.saleError = '';\n\n      switch (event.index) {\n        case 0:\n          this.getFishes();\n          break;\n        case 1:\n          this.getShipments();\n          break;\n        case 2:\n          this.getPackages();\n          break;\n        case 3:\n          this.getTransportations();\n          break;\n        case 4:\n          this.getEntries();\n          break;\n        case 5:\n          this.getSales();\n          break;\n        default:\n          break;\n      }\n\n    }\n  }\n\n  onNodeClicked(event) {\n    console.log('Node clicked..');\n    const id = event.target.id;\n    const node = this.nodes.find(v => v.id === id);\n    this.showInfo = node.data.type;\n\n    switch (this.showInfo) {\n      case 'fish':\n        this.fishesProv = [this.provenanceFishes.find(v => v.occurrence.fishId = id)];\n        break;\n      case 'shipment':\n        this.shipmentsProv = [this.provenanceShipments.find(v => v.occurrence.fishIds = id)];\n        break;\n      case 'package':\n        this.packagesProv = [this.provenancePackage];\n        break;\n      case 'transportation':\n        this.transportationsProv = [this.provenanceTransportation];\n        break;\n      case 'inventory':\n        this.entriesProv = [this.provenanceEntry];\n        break;\n      case 'selling':\n        this.salesProv = [this.provenanceSelling];\n        break;\n    }\n  }\n\n  onEdgeClicked(event) {}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:8080'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///","file":"main-es5.js"}